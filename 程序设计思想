程序设计思想


## 依赖注入

目标就是要“我”无需改动， “被依赖”的改动，对“我”没有影响；


“被依赖” 实现 “我”需要的功能， “我”把需要的功能写在一个接口里， “被依赖”去实现接口
这样“被依赖”的改动， 和“我”没关系， “我”调用接口方法就行了

https://zhuanlan.zhihu.com/p/33492169
我也从其中获得了这样的感悟： 如果一个类A 的功能实现需要借助于类B，那么就称类B是类A的依赖，如果在类A的内部去实例化类B，那么两者之间会出现较高的耦合，一旦类B出现了问题，类A也需要进行改造，如果这样的情况较多，每个类之间都有很多依赖，那么就会出现牵一发而动全身的情况，程序会极难维护，并且很容易出现问题。要解决这个问题，就要把A类对B类的控制权抽离出来，交给一个第三方去做，把控制权反转给第三方，就称作控制反转（IOC Inversion Of Control）。控制反转是一种思想，是能够解决问题的一种可能的结果，而依赖注入（Dependency Injection）就是其最典型的实现方法。由第三方（我们称作IOC容器）来控制依赖，把他通过构造函数、属性或者工厂模式等方法，注入到类A内，这样就极大程度的对类A和类B进行了解耦。

依赖注入的方式：

> 构造方法

> 工厂模式

思想都是把“被依赖”放在第三方初始化；


## 实现依赖注入的框架

Dragger2 

http://johnnyshieh.me/posts/dagger-basic/





## MVP
 
module <=> presenter <=> view 

Activity
Fragment
layouts

分别扮演啥角色呢？

以登陆做个例子；





## 装饰者模式 
https://blog.csdn.net/yanbober/article/details/45395747



## 代理模式


https://blog.csdn.net/briblue/article/details/73928350


http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy


https://www.ibm.com/developerworks/cn/java/j-lo-proxy1/index.html






##  设计思路


helper

service/provide

factory

consume

proxy

manager

decoration




