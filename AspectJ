AspectJ


## 
http://johnnyshieh.me/posts/aspectj-in-android-basic/


## AOP (Aspect Oriented Program)

面向切面编程；

这个 “切面” 就是多个业务流程都需要的公共的一个功能；


“切面” 聚焦于具体的功能点的实现，且封装起来；

然后通过 

注解， 反射， 代理等技术， 注入到具体的业务流程中；

具体看一个例子
https://blog.csdn.net/yanquan345/article/details/19760027


而 AOP 的思想是把对象的核心职责外的通用逻辑（如日志，性能，校验等）抽象出来，把散布在多个对象多个模块的通用逻辑当作切面，然后动态地把代码插入到类的指定方法、指定位置中，实现 AOP 的核心技术也是代码织入技术，如 AspectJ、Javassist、DexMaker、ASMDex、动态代理等。


所以 AOP 可以说是对 OOP 的补充，OOP 以核心职责为主从纵向划分出一个一个类，AOP 以多个类中通用逻辑为主横向划分出一个一个切面，AOP 让 OOP 立体，去除重复代码，降低耦合并且增加可维护性。



## 下载个项目，跑一跑啦



## 可以在不侵入代码的前提下， 扩展代码

就是通过条件匹配的方式进行的， 只要符合这个条件的都可以插入， 多点插入



# AspectJ 靠谱的解释


https://blog.csdn.net/woshimalingyi/article/details/51476559#reply


超级详细的解读
https://blog.csdn.net/innost/article/details/49387395


// --- Pointcuts

那么，Pointcuts是什么呢？前面介绍的内容可知，一个程序会有很多的JPoints，即使是同一个函数（比如testMethod这个函数），还分为call类型和execution类型的JPoint。

怎么从一堆一堆的JPoints中选择自己想要的JPoints呢？恩，这就是Pointcuts的功能。一句话，Pointcuts的目标是提供一种方法使得开发者能够选择自己感兴趣的JoinPoints。




// --- Pointcuts syntax


// +++ method 

@注解 访问权限 返回值的类型 包名.函数名(参数)
  @注解和访问权限（public/private/protect，以及static/final）属于可选项。如果不设置它们，则默认都会选择。以访问权限为例，如果没有设置访问权限作为条件，那么public，private，protect及static、final的函数都会进行搜索。
  返回值类型就是普通的函数的返回值类型。如果不限定类型的话，就用*通配符表示
  包名.函数名用于查找匹配的函数。可以使用通配符，包括*和..以及+号。其中*号用于匹配除.号之外的任意字符，而..则表示任意子package，+号表示子类。
     比如：
     java.*.Date：可以表示java.sql.Date，也可以表示java.util.Date
     Test*：可以表示TestBase，也可以表示TestDervied
     java..*：表示java任意子类
     java..*Model+：表示Java任意package中名字以Model结尾的子类，比如TabelModel，TreeModel
     等
  最后来看函数的参数。参数匹配比较简单，主要是参数类型，比如：
     (int, char)：表示参数只有两个，并且第一个参数类型是int，第二个参数类型是char
     (String, ..)：表示至少有一个参数。并且第一个参数类型是String，后面参数类型不限。在参数匹配中，
     ..代表任意参数个数和类型
     (Object ...)：表示不定个数的参数，且类型都是Object，这里的...不是通配符，而是Java中代表不定参数的意思


// +++ constructor 和 filed 


Constructorsignature和Method Signature类似，只不过构造函数没有返回值，而且函数名必须叫new。比如：
public *..TestDerived.new(..)：
  public：选择public访问权限
  *..代表任意包名
  TestDerived.new：代表TestDerived的构造函数
  (..)：代表参数个数和类型都是任意

再来看Field Signature和Type Signature，用它们的地方见图5。下面直接上几个例子：
Field Signature标准格式：
@注解 访问权限 类型 类名.成员变量名
  其中，@注解和访问权限是可选的
  类型：成员变量类型，*代表任意类型
  类名.成员变量名：成员变量名可以是*，代表任意成员变量
比如，
set(inttest..TestBase.base)：表示设置TestBase.base变量时的JPoint
Type Signature：直接上例子
staticinitialization(test..TestBase)：表示TestBase类的static block
handler(NullPointerException)：表示catch到NullPointerException的JPoint。注意，图2的源码第23行截获的其实是Exception，其真实类型是NullPointerException。但是由于JPointer的查询匹配是静态的，即编译过程中进行的匹配，所以handler(NullPointerException)在运行时并不能真正被截获。只有改成handler(Exception)，或者把源码第23行改成NullPointerException才行。





## 流程

https://blog.csdn.net/innost/article/details/49387395

> 选择插入点
Pointcuts
现在，我们知道如何通过pointcuts来选择合适的JPoint。那么，下一步工作就很明确了，选择这些JPoint后，我们肯定是需要干一些事情的。比如前面例子中的输出都有before，after之类的。这其实JPoint在执行前，执行后，都执行了一些我们设置的代码。在AspectJ中，这段代码叫advice。简单点说，advice就是一种Hook。

那么，Pointcuts是什么呢？前面介绍的内容可知，一个程序会有很多的JPoints，即使是同一个函数（比如testMethod这个函数），还分为call类型和execution类型的JPoint。显然，不是所有的JPoint，也不是所有类型的JPoint都是我们关注的。


> 创建advie 


## 总结

> 
 AspectJ中各种类型的JoinPoint，JPoint是一个程序的关键执行点，也是我们关注的重点。

 > 
 pointcuts：提供了一种方法来选择目标JPoint。程序有很多JPoint，但是需要一种方法来让我们选择我们关注的JPoint。这个方法就是利用pointcuts来完成的。

> 通过pointcuts选择了目标JPoint后，我们总得干点什么吧？这就用上了advice。advice包括好几种类型，一般情况下都够我们用了。




